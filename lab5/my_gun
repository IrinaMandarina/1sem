import pygame
from pygame.draw import *
from numpy import arctan, pi
from random import randint

gamer_name = input('What is your name?')

pygame.init()

FPS = 20
screen = pygame.display.set_mode((600, 800))
screen.fill((255, 255, 255))


def record(file_name):
    new_gamer = [gamer_name, k]
    gamers = []  # list of gamers and their scores

    # building of the list of gamers
    with open(file_name, 'r+') as file:
        for s in file:  # reading from the file
            gamers.append(s.split())
        gamers.append(new_gamer)
        for gamer in gamers:
            gamer[1] = int(gamer[1])
        gamers = sorted(gamers, key=lambda gamer: gamer[1], reverse=True)  # sorting of records
        file.seek(0)  # clearing of the file
        file.truncate()
        for gamer in gamers:
            gamer = str(gamer[0]) + ' ' + str(gamer[1]) + '\n'
            file.write(gamer)  # rewriting of the file


def rotate(img, pos, angle):
    w, h = img.get_size()
    img2 = pygame.Surface((w * 2, h * 2), pygame.SRCALPHA)
    img2.blit(img, (w - pos[0], h - pos[1]))
    return pygame.transform.rotate(img2, angle)


class Ball():
    def __init__(self, x, y, r, color, dx, dy, screen, hit=False):
        self.x = x
        self.y = y
        self.r = r
        self.dx = dx
        self.dy = dy
        self.color = color
        self.screen = screen
        self.hit = hit
        self.lifetime = 150

    def draw(self):
        """
        Function draws a usual ball. It costs 1 coin.
        """
        circle(self.screen, self.color, (self.x, self.y), self.r)

    def move(self):
        x_next = self.x + self.dx
        y_next = self.y + self.dy
        # conditions of reflection from the walls
        if (600 < self.x + self.r < x_next + self.r) or (0 > self.x - self.r > x_next - self.r):
            self.dx *= -1
        if (800 < self.y + self.r < y_next + self.r) or (0 > self.y - self.r > y_next - self.r):
            self.dy *= -1
        self.x += self.dx
        self.y += self.dy
        self.dy += 1


class Target(Ball):
    def __init__(self, x, y, r, color, dx, dy, screen, hit):
        super().__init__(x, y, r, color, dx, dy, screen, hit)
        self.lifetime = 50


class Gun():

    def __init__(self, screen):
        self.screen = screen

    def draw_gun(self, x_m, y_m, dl=0):
        screen_gun = pygame.Surface((100 + dl, 40))
        screen_gun.fill((0, 0, 0))
        screen_gun.set_colorkey((0, 0, 0))
        rect(screen_gun, (255, 0, 0), (0, 0, 100 + dl, 20))
        angle = arctan((400 - y_m) / (x_m - 5)) * 180 / pi
        screen_gun = rotate(screen_gun, (0, 10), angle)
        rect1 = screen_gun.get_rect()
        rect1.center = 5, 400
        self.screen.blit(screen_gun, rect1)

    def shoot(self, x_m, y_m, dl):
        x_b = 5 + int((100 + dl) * (x_m - 5) / ((x_m - 5) ** 2 + (400 - y_m) ** 2) ** 0.5)
        y_b = 400 - int((100 + dl) * (400 - y_m) / ((x_m - 5) ** 2 + (400 - y_m) ** 2) ** 0.5)
        dy_b = int((5 + (20 * (-400 + y_m) / ((x_m - 25) ** 2 + (400 - y_m) ** 2) ** 0.5)) * (1 + dl / 80))
        dx_b = int((5 + (20 * (x_m - 5) / ((x_m - 5) ** 2 + (400 - y_m) ** 2) ** 0.5)) * (1 + dl / 80))
        return Target(x_b, y_b, 20, (0, 255, 0), dx_b, dy_b, self.screen, hit=False)


class Button():
    def __init__(self, screen, x, y, color, name):
        self.screen = screen
        self.x = x
        self.y = y
        self.name = name
        f = pygame.font.Font(None, 36)
        self.w_x, self.w_y = f.size(self.name)
        self.color = color
        self.click = False

    def draw(self):
        rect(self.screen, self.color, (self.x, self.y, self.w_x + 10, self.w_y + 10))
        f = pygame.font.Font(None, 36)
        text = f.render(self.name, 1, (0, 0, 0))
        self.screen.blit(text, (self.x + 5, self.y + 5))

    def hitting(self, x_m, y_m):
        if self.x <= x_m <= self.x + self.w_x + 10 and self.y <= y_m <= self.y + self.w_y + 10:
            self.click = True

    def check(self, x_m, y_m):
        if self.x <= x_m <= self.x + self.w_x + 10 and self.y <= y_m <= self.y + self.w_y + 10:
            return True
        else:
            return False


gun = Gun(screen)
dl = 0
boo = False
shells = []
k = 0
balls = []
timer = 0
restart = Button(screen, 5, 5, (255, 128, 0), 'Restart')
record_file = 'rating.txt'

pygame.display.update()
clock = pygame.time.Clock()
finished = False

while not finished:
    clock.tick(FPS)
    screen.fill((255, 255, 255))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        if event.type == pygame.MOUSEBUTTONDOWN:
            boo = pygame.mouse.get_pressed()[0]
            (x_m, y_m) = pygame.mouse.get_pos()
            restart.hitting(x_m, y_m)
        if event.type == pygame.MOUSEBUTTONUP:
            boo = pygame.mouse.get_pressed()[0]
            (x_m, y_m) = pygame.mouse.get_pos()
            if not restart.check(x_m, y_m):
                shell = gun.shoot(x_m, y_m, dl)
                shells.append(shell)
            dl = 0

    for shell in shells:
        if shell.lifetime > 0 and not shell.hit:
            shell.draw()
            shell.move()
            shell.lifetime -= 1
        else:
            shells.remove(shell)

    if boo:
        dl += 2
        (x_m, y_m) = pygame.mouse.get_pos()
        gun.draw_gun(x_m, y_m, dl)

    if pygame.mouse.get_focused():
        (x_m, y_m) = pygame.mouse.get_pos()
        gun.draw_gun(x_m, y_m, dl)

    if (timer % 30 == 0) and (len(balls) < 3):
        r = randint(20, 50)
        x = randint(350, 550)
        y = randint(50, 750)
        dx = randint(-5, 5)
        dy = randint(-5, 5)
        lifetime = 100
        color = (randint(0, 255), randint(0, 255), randint(0, 255))
        ball = Ball(x, y, r, color, dx, dy, screen)
        balls.append(ball)
        ball.draw()

    for i in range(len(balls)):  # interaction of the balls
        for j in range(i + 1, len(balls)):
            x_next1 = balls[i].dx + balls[i].x
            x_next2 = balls[j].dx + balls[j].x
            y_next1 = balls[i].dy + balls[i].y
            y_next2 = balls[j].dy + balls[j].y
            if ((balls[i].x - balls[j].x) ** 2 + (balls[i].y - balls[j].y) ** 2 <= (balls[i].r + balls[j].r) ** 2) and \
                    ((balls[i].x - balls[j].x) ** 2 + (balls[i].y - balls[j].y) ** 2 > (x_next1 - x_next2) ** 2 + (
                            y_next1 - y_next2) ** 2):
                balls[i].dx *= (-1)
                balls[j].dx *= (-1)
                balls[i].dy *= (-1)
                balls[j].dy *= (-1)

    for ball in balls:
        ball.move()
        # condition for disappearing if the ball is old
        if ball.lifetime > 0 and not ball.hit:
            ball.draw()
            ball.lifetime -= 1
        else:
            balls.remove(ball)

    for shell in shells:
        for ball in balls:
            if (ball.x - shell.x) ** 2 + (ball.y - shell.y) ** 2 <= (ball.r + 20) ** 2:
                k += 1
                balls.remove(ball)
                shells.remove(shell)

    # output of the score on the game display
    f = pygame.font.Font(None, 36)
    text = f.render('Score:' + str(k), 1, (180, 0, 0))
    screen.blit(text, (250, 20))

    timer += 1

    restart.draw()
    if restart.click:
        restart.color = (randint(100, 255), randint(100, 255), randint(100, 255))
        timer = 0
        k = 0
        restart.click = False
        record(record_file)

    pygame.display.update()

pygame.quit()

record(record_file)
